//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace webgallery.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class mscomwebDBEntitiesDB : DbContext
    {
        public mscomwebDBEntitiesDB()
            : base("name=mscomwebDBEntitiesDB")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicationInGallery> ApplicationInGalleries { get; set; }
        public virtual DbSet<ArchitectureType> ArchitectureTypes { get; set; }
        public virtual DbSet<BlogPost> BlogPosts { get; set; }
        public virtual DbSet<ChapterLog> ChapterLogs { get; set; }
        public virtual DbSet<CommentModeration> CommentModerations { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<ContentIndex> ContentIndexes { get; set; }
        public virtual DbSet<DatabaseServer> DatabaseServers { get; set; }
        public virtual DbSet<DirectContactMethod> DirectContactMethods { get; set; }
        public virtual DbSet<FrameworksAndRuntime> FrameworksAndRuntimes { get; set; }
        public virtual DbSet<GalleryType> GalleryTypes { get; set; }
        public virtual DbSet<Hosters_ActiveStatus> Hosters_ActiveStatus { get; set; }
        public virtual DbSet<Hosters_Admin> Hosters_Admin { get; set; }
        public virtual DbSet<Hosters_City> Hosters_City { get; set; }
        public virtual DbSet<Hosters_CloudOfferCategory> Hosters_CloudOfferCategory { get; set; }
        public virtual DbSet<Hosters_CloudOfferCategoryDetail> Hosters_CloudOfferCategoryDetail { get; set; }
        public virtual DbSet<Hosters_CloudOfferXmlPrice> Hosters_CloudOfferXmlPrice { get; set; }
        public virtual DbSet<Hosters_Country> Hosters_Country { get; set; }
        public virtual DbSet<Hosters_CustomFeature> Hosters_CustomFeature { get; set; }
        public virtual DbSet<Hosters_CustomField> Hosters_CustomField { get; set; }
        public virtual DbSet<Hosters_CustomFieldDomainValue> Hosters_CustomFieldDomainValue { get; set; }
        public virtual DbSet<Hosters_CustomFieldType> Hosters_CustomFieldType { get; set; }
        public virtual DbSet<Hosters_ExceptionDetail> Hosters_ExceptionDetail { get; set; }
        public virtual DbSet<Hosters_FeaturedOffer> Hosters_FeaturedOffer { get; set; }
        public virtual DbSet<Hosters_HostingProviderDetail> Hosters_HostingProviderDetail { get; set; }
        public virtual DbSet<Hosters_HostingProviderLogo> Hosters_HostingProviderLogo { get; set; }
        public virtual DbSet<Hosters_HostingProviderOwner> Hosters_HostingProviderOwner { get; set; }
        public virtual DbSet<Hosters_HostingType> Hosters_HostingType { get; set; }
        public virtual DbSet<Hosters_HostingTypeTileField> Hosters_HostingTypeTileField { get; set; }
        public virtual DbSet<Hosters_Language> Hosters_Language { get; set; }
        public virtual DbSet<Hosters_LocalisedCustomFields> Hosters_LocalisedCustomFields { get; set; }
        public virtual DbSet<Hosters_OfferActiveStatus> Hosters_OfferActiveStatus { get; set; }
        public virtual DbSet<Hosters_OfferCountry> Hosters_OfferCountry { get; set; }
        public virtual DbSet<Hosters_OfferCountryAdminExclude> Hosters_OfferCountryAdminExclude { get; set; }
        public virtual DbSet<Hosters_OfferCustomFieldValue> Hosters_OfferCustomFieldValue { get; set; }
        public virtual DbSet<Hosters_OfferPriceFrequency> Hosters_OfferPriceFrequency { get; set; }
        public virtual DbSet<Hosters_OfferProfile> Hosters_OfferProfile { get; set; }
        public virtual DbSet<Hosters_Offers> Hosters_Offers { get; set; }
        public virtual DbSet<Hosters_PartnerTypes> Hosters_PartnerTypes { get; set; }
        public virtual DbSet<Hosters_Region> Hosters_Region { get; set; }
        public virtual DbSet<Hosters_Review> Hosters_Review { get; set; }
        public virtual DbSet<Hosters_State> Hosters_State { get; set; }
        public virtual DbSet<Hosters_TargetedCountry> Hosters_TargetedCountry { get; set; }
        public virtual DbSet<Hosters_TileFields> Hosters_TileFields { get; set; }
        public virtual DbSet<Hosters_Validation> Hosters_Validation { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PageView> PageViews { get; set; }
        public virtual DbSet<ProductOrAppCategory> ProductOrAppCategories { get; set; }
        public virtual DbSet<ProductOrAppImage> ProductOrAppImages { get; set; }
        public virtual DbSet<PullQuote> PullQuotes { get; set; }
        public virtual DbSet<Rating> Ratings { get; set; }
        public virtual DbSet<Submission> Submissions { get; set; }
        public virtual DbSet<SubmissionsStatu> SubmissionsStatus { get; set; }
        public virtual DbSet<SubmissionState> SubmissionStates { get; set; }
        public virtual DbSet<SubmissionTransaction> SubmissionTransactions { get; set; }
        public virtual DbSet<SubmissionTransactionType> SubmissionTransactionTypes { get; set; }
        public virtual DbSet<Submitter> Submitters { get; set; }
        public virtual DbSet<SubmittersContactDetail> SubmittersContactDetails { get; set; }
        public virtual DbSet<TagClick> TagClicks { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TrainingLog> TrainingLogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<WapCommunitySignup> WapCommunitySignups { get; set; }
        public virtual DbSet<WebServerExtension> WebServerExtensions { get; set; }
        public virtual DbSet<AppDownloadStat> AppDownloadStats { get; set; }
        public virtual DbSet<PID> PIDs { get; set; }
        public virtual DbSet<ProdDownloadStat> ProdDownloadStats { get; set; }
        public virtual DbSet<ProdDownloadStatsINVALID> ProdDownloadStatsINVALIDs { get; set; }
        public virtual DbSet<SubmissionLocalizedMetaData> SubmissionLocalizedMetaDatas { get; set; }
        public virtual DbSet<SubmissionOwner> SubmissionOwners { get; set; }
        public virtual DbSet<UnconfirmedSubmissionOwner> UnconfirmedSubmissionOwners { get; set; }
        public virtual DbSet<AvgApplicationRating> AvgApplicationRatings { get; set; }
        public virtual DbSet<HostersV_OfferCountryAdminExclude> HostersV_OfferCountryAdminExclude { get; set; }
        public virtual DbSet<SubmissionStateAll> SubmissionStateAlls { get; set; }
    
        [DbFunction("mscomwebDBEntitiesDB", "fnSplit")]
        public virtual IQueryable<fnSplit_Result> fnSplit(string sInputList, string sDelimiter)
        {
            var sInputListParameter = sInputList != null ?
                new ObjectParameter("sInputList", sInputList) :
                new ObjectParameter("sInputList", typeof(string));
    
            var sDelimiterParameter = sDelimiter != null ?
                new ObjectParameter("sDelimiter", sDelimiter) :
                new ObjectParameter("sDelimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplit_Result>("[mscomwebDBEntitiesDB].[fnSplit](@sInputList, @sDelimiter)", sInputListParameter, sDelimiterParameter);
        }
    
        [DbFunction("mscomwebDBEntitiesDB", "Split")]
        public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[mscomwebDBEntitiesDB].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddOrChangeProductOrApp(Nullable<int> submissionID, string nickname, string version, string submittingEntity, string submittingEntityURL, string appURL, string supportURL, Nullable<System.DateTime> releaseDate, Nullable<int> frameworkOrRuntimeID, string databaseServerIDs, string webServerExtensionIDs, Nullable<int> categoryID1, Nullable<int> categoryID2, byte[] logoBits, Nullable<System.Guid> logoGUID, byte[] screenshotBits1, Nullable<System.Guid> screenshotGUID1, byte[] screenshotBits2, Nullable<System.Guid> screenshotGUID2, byte[] screenshotBits3, Nullable<System.Guid> screenshotGUID3, byte[] screenshotBits4, Nullable<System.Guid> screenshotGUID4, byte[] screenshotBits5, Nullable<System.Guid> screenshotGUID5, byte[] screenshotBits6, Nullable<System.Guid> screenshotGUID6, string professionalServicesURL, string commercialProductURL, Nullable<bool> agreedToTerms, string additionalInfo)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var nicknameParameter = nickname != null ?
                new ObjectParameter("Nickname", nickname) :
                new ObjectParameter("Nickname", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var submittingEntityParameter = submittingEntity != null ?
                new ObjectParameter("SubmittingEntity", submittingEntity) :
                new ObjectParameter("SubmittingEntity", typeof(string));
    
            var submittingEntityURLParameter = submittingEntityURL != null ?
                new ObjectParameter("SubmittingEntityURL", submittingEntityURL) :
                new ObjectParameter("SubmittingEntityURL", typeof(string));
    
            var appURLParameter = appURL != null ?
                new ObjectParameter("AppURL", appURL) :
                new ObjectParameter("AppURL", typeof(string));
    
            var supportURLParameter = supportURL != null ?
                new ObjectParameter("SupportURL", supportURL) :
                new ObjectParameter("SupportURL", typeof(string));
    
            var releaseDateParameter = releaseDate.HasValue ?
                new ObjectParameter("ReleaseDate", releaseDate) :
                new ObjectParameter("ReleaseDate", typeof(System.DateTime));
    
            var frameworkOrRuntimeIDParameter = frameworkOrRuntimeID.HasValue ?
                new ObjectParameter("FrameworkOrRuntimeID", frameworkOrRuntimeID) :
                new ObjectParameter("FrameworkOrRuntimeID", typeof(int));
    
            var databaseServerIDsParameter = databaseServerIDs != null ?
                new ObjectParameter("DatabaseServerIDs", databaseServerIDs) :
                new ObjectParameter("DatabaseServerIDs", typeof(string));
    
            var webServerExtensionIDsParameter = webServerExtensionIDs != null ?
                new ObjectParameter("WebServerExtensionIDs", webServerExtensionIDs) :
                new ObjectParameter("WebServerExtensionIDs", typeof(string));
    
            var categoryID1Parameter = categoryID1.HasValue ?
                new ObjectParameter("CategoryID1", categoryID1) :
                new ObjectParameter("CategoryID1", typeof(int));
    
            var categoryID2Parameter = categoryID2.HasValue ?
                new ObjectParameter("CategoryID2", categoryID2) :
                new ObjectParameter("CategoryID2", typeof(int));
    
            var logoBitsParameter = logoBits != null ?
                new ObjectParameter("LogoBits", logoBits) :
                new ObjectParameter("LogoBits", typeof(byte[]));
    
            var logoGUIDParameter = logoGUID.HasValue ?
                new ObjectParameter("LogoGUID", logoGUID) :
                new ObjectParameter("LogoGUID", typeof(System.Guid));
    
            var screenshotBits1Parameter = screenshotBits1 != null ?
                new ObjectParameter("ScreenshotBits1", screenshotBits1) :
                new ObjectParameter("ScreenshotBits1", typeof(byte[]));
    
            var screenshotGUID1Parameter = screenshotGUID1.HasValue ?
                new ObjectParameter("ScreenshotGUID1", screenshotGUID1) :
                new ObjectParameter("ScreenshotGUID1", typeof(System.Guid));
    
            var screenshotBits2Parameter = screenshotBits2 != null ?
                new ObjectParameter("ScreenshotBits2", screenshotBits2) :
                new ObjectParameter("ScreenshotBits2", typeof(byte[]));
    
            var screenshotGUID2Parameter = screenshotGUID2.HasValue ?
                new ObjectParameter("ScreenshotGUID2", screenshotGUID2) :
                new ObjectParameter("ScreenshotGUID2", typeof(System.Guid));
    
            var screenshotBits3Parameter = screenshotBits3 != null ?
                new ObjectParameter("ScreenshotBits3", screenshotBits3) :
                new ObjectParameter("ScreenshotBits3", typeof(byte[]));
    
            var screenshotGUID3Parameter = screenshotGUID3.HasValue ?
                new ObjectParameter("ScreenshotGUID3", screenshotGUID3) :
                new ObjectParameter("ScreenshotGUID3", typeof(System.Guid));
    
            var screenshotBits4Parameter = screenshotBits4 != null ?
                new ObjectParameter("ScreenshotBits4", screenshotBits4) :
                new ObjectParameter("ScreenshotBits4", typeof(byte[]));
    
            var screenshotGUID4Parameter = screenshotGUID4.HasValue ?
                new ObjectParameter("ScreenshotGUID4", screenshotGUID4) :
                new ObjectParameter("ScreenshotGUID4", typeof(System.Guid));
    
            var screenshotBits5Parameter = screenshotBits5 != null ?
                new ObjectParameter("ScreenshotBits5", screenshotBits5) :
                new ObjectParameter("ScreenshotBits5", typeof(byte[]));
    
            var screenshotGUID5Parameter = screenshotGUID5.HasValue ?
                new ObjectParameter("ScreenshotGUID5", screenshotGUID5) :
                new ObjectParameter("ScreenshotGUID5", typeof(System.Guid));
    
            var screenshotBits6Parameter = screenshotBits6 != null ?
                new ObjectParameter("ScreenshotBits6", screenshotBits6) :
                new ObjectParameter("ScreenshotBits6", typeof(byte[]));
    
            var screenshotGUID6Parameter = screenshotGUID6.HasValue ?
                new ObjectParameter("ScreenshotGUID6", screenshotGUID6) :
                new ObjectParameter("ScreenshotGUID6", typeof(System.Guid));
    
            var professionalServicesURLParameter = professionalServicesURL != null ?
                new ObjectParameter("ProfessionalServicesURL", professionalServicesURL) :
                new ObjectParameter("ProfessionalServicesURL", typeof(string));
    
            var commercialProductURLParameter = commercialProductURL != null ?
                new ObjectParameter("CommercialProductURL", commercialProductURL) :
                new ObjectParameter("CommercialProductURL", typeof(string));
    
            var agreedToTermsParameter = agreedToTerms.HasValue ?
                new ObjectParameter("AgreedToTerms", agreedToTerms) :
                new ObjectParameter("AgreedToTerms", typeof(bool));
    
            var additionalInfoParameter = additionalInfo != null ?
                new ObjectParameter("AdditionalInfo", additionalInfo) :
                new ObjectParameter("AdditionalInfo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddOrChangeProductOrApp", submissionIDParameter, nicknameParameter, versionParameter, submittingEntityParameter, submittingEntityURLParameter, appURLParameter, supportURLParameter, releaseDateParameter, frameworkOrRuntimeIDParameter, databaseServerIDsParameter, webServerExtensionIDsParameter, categoryID1Parameter, categoryID2Parameter, logoBitsParameter, logoGUIDParameter, screenshotBits1Parameter, screenshotGUID1Parameter, screenshotBits2Parameter, screenshotGUID2Parameter, screenshotBits3Parameter, screenshotGUID3Parameter, screenshotBits4Parameter, screenshotGUID4Parameter, screenshotBits5Parameter, screenshotGUID5Parameter, screenshotBits6Parameter, screenshotGUID6Parameter, professionalServicesURLParameter, commercialProductURLParameter, agreedToTermsParameter, additionalInfoParameter);
        }
    
        public virtual int AddOrChangeProductOrAppMetaData(Nullable<int> submissionID, string language, string name, string description, string briefDescription)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var briefDescriptionParameter = briefDescription != null ?
                new ObjectParameter("BriefDescription", briefDescription) :
                new ObjectParameter("BriefDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrChangeProductOrAppMetaData", submissionIDParameter, languageParameter, nameParameter, descriptionParameter, briefDescriptionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddOrChangeSubmissionContact(string personalID, Nullable<int> personalIDType, string prefix, string firstName, string middleName, string lastName, string suffix, string contactTitle, string eMail, string address1, string address2, string address3, string city, string stateOrProvince, string zipOrRegionCode, string country, Nullable<int> directContactMethodID1, string directData1, Nullable<int> directContactMethodID2, string directData2)
        {
            var personalIDParameter = personalID != null ?
                new ObjectParameter("PersonalID", personalID) :
                new ObjectParameter("PersonalID", typeof(string));
    
            var personalIDTypeParameter = personalIDType.HasValue ?
                new ObjectParameter("PersonalIDType", personalIDType) :
                new ObjectParameter("PersonalIDType", typeof(int));
    
            var prefixParameter = prefix != null ?
                new ObjectParameter("Prefix", prefix) :
                new ObjectParameter("Prefix", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var contactTitleParameter = contactTitle != null ?
                new ObjectParameter("ContactTitle", contactTitle) :
                new ObjectParameter("ContactTitle", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateOrProvinceParameter = stateOrProvince != null ?
                new ObjectParameter("StateOrProvince", stateOrProvince) :
                new ObjectParameter("StateOrProvince", typeof(string));
    
            var zipOrRegionCodeParameter = zipOrRegionCode != null ?
                new ObjectParameter("ZipOrRegionCode", zipOrRegionCode) :
                new ObjectParameter("ZipOrRegionCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var directContactMethodID1Parameter = directContactMethodID1.HasValue ?
                new ObjectParameter("DirectContactMethodID1", directContactMethodID1) :
                new ObjectParameter("DirectContactMethodID1", typeof(int));
    
            var directData1Parameter = directData1 != null ?
                new ObjectParameter("DirectData1", directData1) :
                new ObjectParameter("DirectData1", typeof(string));
    
            var directContactMethodID2Parameter = directContactMethodID2.HasValue ?
                new ObjectParameter("DirectContactMethodID2", directContactMethodID2) :
                new ObjectParameter("DirectContactMethodID2", typeof(int));
    
            var directData2Parameter = directData2 != null ?
                new ObjectParameter("DirectData2", directData2) :
                new ObjectParameter("DirectData2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddOrChangeSubmissionContact", personalIDParameter, personalIDTypeParameter, prefixParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, contactTitleParameter, eMailParameter, address1Parameter, address2Parameter, address3Parameter, cityParameter, stateOrProvinceParameter, zipOrRegionCodeParameter, countryParameter, directContactMethodID1Parameter, directData1Parameter, directContactMethodID2Parameter, directData2Parameter);
        }
    
        public virtual int allocate_PID(string captcha, string puid, ObjectParameter pid, ObjectParameter count_remaining, ObjectParameter status_code)
        {
            var captchaParameter = captcha != null ?
                new ObjectParameter("captcha", captcha) :
                new ObjectParameter("captcha", typeof(string));
    
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("allocate_PID", captchaParameter, puidParameter, pid, count_remaining, status_code);
        }
    
        public virtual ObjectResult<Nullable<int>> count_PID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("count_PID");
        }
    
        public virtual int DeleteFeaturedOffers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFeaturedOffers");
        }
    
        public virtual int DeleteRating(string contentId, string puid)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRating", contentIdParameter, puidParameter);
        }
    
        public virtual int DeleteSubmission(Nullable<int> submissionID)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSubmission", submissionIDParameter);
        }
    
        public virtual int DeleteTileFields()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTileFields");
        }
    
        public virtual int DeleteTransaction(Nullable<int> submissionTransactionID)
        {
            var submissionTransactionIDParameter = submissionTransactionID.HasValue ?
                new ObjectParameter("SubmissionTransactionID", submissionTransactionID) :
                new ObjectParameter("SubmissionTransactionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTransaction", submissionTransactionIDParameter);
        }
    
        public virtual ObjectResult<string> get_PreviouslyDistributedPID(string puid)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("get_PreviouslyDistributedPID", puidParameter);
        }
    
        public virtual int GetAllAppDownloadCounts(Nullable<System.DateTime> whenStart, Nullable<System.DateTime> whenEnd, string appID, string architectureName, string language, string country, string referrer)
        {
            var whenStartParameter = whenStart.HasValue ?
                new ObjectParameter("WhenStart", whenStart) :
                new ObjectParameter("WhenStart", typeof(System.DateTime));
    
            var whenEndParameter = whenEnd.HasValue ?
                new ObjectParameter("WhenEnd", whenEnd) :
                new ObjectParameter("WhenEnd", typeof(System.DateTime));
    
            var appIDParameter = appID != null ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(string));
    
            var architectureNameParameter = architectureName != null ?
                new ObjectParameter("ArchitectureName", architectureName) :
                new ObjectParameter("ArchitectureName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllAppDownloadCounts", whenStartParameter, whenEndParameter, appIDParameter, architectureNameParameter, languageParameter, countryParameter, referrerParameter);
        }
    
        public virtual int GetAllProdDownloadCounts(Nullable<System.DateTime> whenStart, Nullable<System.DateTime> whenEnd, string prodID, string architectureName, string language, string country, string referrer)
        {
            var whenStartParameter = whenStart.HasValue ?
                new ObjectParameter("WhenStart", whenStart) :
                new ObjectParameter("WhenStart", typeof(System.DateTime));
    
            var whenEndParameter = whenEnd.HasValue ?
                new ObjectParameter("WhenEnd", whenEnd) :
                new ObjectParameter("WhenEnd", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            var architectureNameParameter = architectureName != null ?
                new ObjectParameter("ArchitectureName", architectureName) :
                new ObjectParameter("ArchitectureName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllProdDownloadCounts", whenStartParameter, whenEndParameter, prodIDParameter, architectureNameParameter, languageParameter, countryParameter, referrerParameter);
        }
    
        public virtual ObjectResult<GetAllSubmissionsInBrief_Result> GetAllSubmissionsInBrief()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSubmissionsInBrief_Result>("GetAllSubmissionsInBrief");
        }
    
        public virtual ObjectResult<string> GetAllTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAllTags");
        }
    
        public virtual int GetAppDownloadCount(Nullable<System.DateTime> whenStart, Nullable<System.DateTime> whenEnd, string appID, string version, string architectureName, string language, string country, string referrer)
        {
            var whenStartParameter = whenStart.HasValue ?
                new ObjectParameter("WhenStart", whenStart) :
                new ObjectParameter("WhenStart", typeof(System.DateTime));
    
            var whenEndParameter = whenEnd.HasValue ?
                new ObjectParameter("WhenEnd", whenEnd) :
                new ObjectParameter("WhenEnd", typeof(System.DateTime));
    
            var appIDParameter = appID != null ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var architectureNameParameter = architectureName != null ?
                new ObjectParameter("ArchitectureName", architectureName) :
                new ObjectParameter("ArchitectureName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAppDownloadCount", whenStartParameter, whenEndParameter, appIDParameter, versionParameter, architectureNameParameter, languageParameter, countryParameter, referrerParameter);
        }
    
        public virtual int GetAudience(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("ContentId", contentId) :
                new ObjectParameter("ContentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAudience", contentIdParameter);
        }
    
        public virtual int GetBlogAudience(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("ContentId", contentId) :
                new ObjectParameter("ContentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBlogAudience", contentIdParameter);
        }
    
        public virtual int GetBlogTag(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("ContentId", contentId) :
                new ObjectParameter("ContentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetBlogTag", contentIdParameter);
        }
    
        public virtual ObjectResult<GetComments_Result> GetComments(Nullable<int> commentId, string contentId, string author, string isActive)
        {
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("commentId", commentId) :
                new ObjectParameter("commentId", typeof(int));
    
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetComments_Result>("GetComments", commentIdParameter, contentIdParameter, authorParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<GetContactDetails_Result> GetContactDetails(string personalID, Nullable<int> personalIDType)
        {
            var personalIDParameter = personalID != null ?
                new ObjectParameter("PersonalID", personalID) :
                new ObjectParameter("PersonalID", typeof(string));
    
            var personalIDTypeParameter = personalIDType.HasValue ?
                new ObjectParameter("PersonalIDType", personalIDType) :
                new ObjectParameter("PersonalIDType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContactDetails_Result>("GetContactDetails", personalIDParameter, personalIDTypeParameter);
        }
    
        public virtual ObjectResult<GetDashboardOffers_Result> GetDashboardOffers(Nullable<int> pageSize, Nullable<int> offerType, Nullable<int> currentPageIndex, Nullable<int> hostingProviderID, string hostingProviderIDs, Nullable<bool> isAdmin, ObjectParameter totalRecords)
        {
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("currentPageIndex", currentPageIndex) :
                new ObjectParameter("currentPageIndex", typeof(int));
    
            var hostingProviderIDParameter = hostingProviderID.HasValue ?
                new ObjectParameter("hostingProviderID", hostingProviderID) :
                new ObjectParameter("hostingProviderID", typeof(int));
    
            var hostingProviderIDsParameter = hostingProviderIDs != null ?
                new ObjectParameter("hostingProviderIDs", hostingProviderIDs) :
                new ObjectParameter("hostingProviderIDs", typeof(string));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("isAdmin", isAdmin) :
                new ObjectParameter("isAdmin", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDashboardOffers_Result>("GetDashboardOffers", pageSizeParameter, offerTypeParameter, currentPageIndexParameter, hostingProviderIDParameter, hostingProviderIDsParameter, isAdminParameter, totalRecords);
        }
    
        public virtual ObjectResult<GetFeaturedOffersForHostingType_Result> GetFeaturedOffersForHostingType(Nullable<int> countryID, Nullable<bool> isRegion, string currencyCode, Nullable<int> hostingTypeID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var isRegionParameter = isRegion.HasValue ?
                new ObjectParameter("isRegion", isRegion) :
                new ObjectParameter("isRegion", typeof(bool));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var hostingTypeIDParameter = hostingTypeID.HasValue ?
                new ObjectParameter("hostingTypeID", hostingTypeID) :
                new ObjectParameter("hostingTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeaturedOffersForHostingType_Result>("GetFeaturedOffersForHostingType", countryIDParameter, isRegionParameter, currencyCodeParameter, hostingTypeIDParameter);
        }
    
        public virtual ObjectResult<GetFeaturedOffersSet_Result> GetFeaturedOffersSet(Nullable<int> countryID, Nullable<bool> isRegion, string currencyCode, Nullable<int> websiteHostingTypeID, Nullable<int> virtualHostingTypeID, Nullable<int> dedicatedHostingTypeID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var isRegionParameter = isRegion.HasValue ?
                new ObjectParameter("isRegion", isRegion) :
                new ObjectParameter("isRegion", typeof(bool));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var websiteHostingTypeIDParameter = websiteHostingTypeID.HasValue ?
                new ObjectParameter("websiteHostingTypeID", websiteHostingTypeID) :
                new ObjectParameter("websiteHostingTypeID", typeof(int));
    
            var virtualHostingTypeIDParameter = virtualHostingTypeID.HasValue ?
                new ObjectParameter("virtualHostingTypeID", virtualHostingTypeID) :
                new ObjectParameter("virtualHostingTypeID", typeof(int));
    
            var dedicatedHostingTypeIDParameter = dedicatedHostingTypeID.HasValue ?
                new ObjectParameter("dedicatedHostingTypeID", dedicatedHostingTypeID) :
                new ObjectParameter("dedicatedHostingTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFeaturedOffersSet_Result>("GetFeaturedOffersSet", countryIDParameter, isRegionParameter, currencyCodeParameter, websiteHostingTypeIDParameter, virtualHostingTypeIDParameter, dedicatedHostingTypeIDParameter);
        }
    
        public virtual ObjectResult<byte[]> GetHosterLogoImage(Nullable<int> hosterId)
        {
            var hosterIdParameter = hosterId.HasValue ?
                new ObjectParameter("HosterId", hosterId) :
                new ObjectParameter("HosterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("GetHosterLogoImage", hosterIdParameter);
        }
    
        public virtual ObjectResult<GetImage_Result> GetImage(Nullable<System.Guid> imageGUID)
        {
            var imageGUIDParameter = imageGUID.HasValue ?
                new ObjectParameter("ImageGUID", imageGUID) :
                new ObjectParameter("ImageGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImage_Result>("GetImage", imageGUIDParameter);
        }
    
        public virtual ObjectResult<GetMySubmissionsInBrief_Result> GetMySubmissionsInBrief(string personalID, Nullable<int> personalIDType)
        {
            var personalIDParameter = personalID != null ?
                new ObjectParameter("PersonalID", personalID) :
                new ObjectParameter("PersonalID", typeof(string));
    
            var personalIDTypeParameter = personalIDType.HasValue ?
                new ObjectParameter("PersonalIDType", personalIDType) :
                new ObjectParameter("PersonalIDType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMySubmissionsInBrief_Result>("GetMySubmissionsInBrief", personalIDParameter, personalIDTypeParameter);
        }
    
        public virtual int Getoffersforall(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> unlimitedValue, Nullable<int> mainMinBandwidth, Nullable<int> mainMinEmailIdCount, Nullable<int> mainMinSqlDb, string technologies, string searchText, string currencyCode, Nullable<bool> isOnlySpotlight)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var unlimitedValueParameter = unlimitedValue.HasValue ?
                new ObjectParameter("unlimitedValue", unlimitedValue) :
                new ObjectParameter("unlimitedValue", typeof(int));
    
            var mainMinBandwidthParameter = mainMinBandwidth.HasValue ?
                new ObjectParameter("mainMinBandwidth", mainMinBandwidth) :
                new ObjectParameter("mainMinBandwidth", typeof(int));
    
            var mainMinEmailIdCountParameter = mainMinEmailIdCount.HasValue ?
                new ObjectParameter("mainMinEmailIdCount", mainMinEmailIdCount) :
                new ObjectParameter("mainMinEmailIdCount", typeof(int));
    
            var mainMinSqlDbParameter = mainMinSqlDb.HasValue ?
                new ObjectParameter("mainMinSqlDb", mainMinSqlDb) :
                new ObjectParameter("mainMinSqlDb", typeof(int));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getoffersforall", priceMinParameter, priceMaxParameter, is24X7SupportParameter, is99UptimeParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, unlimitedValueParameter, mainMinBandwidthParameter, mainMinEmailIdCountParameter, mainMinSqlDbParameter, technologiesParameter, searchTextParameter, currencyCodeParameter, isOnlySpotlightParameter);
        }
    
        public virtual int Getoffersforall_1(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<bool> isPromotional, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> unlimitedValue, Nullable<int> mainMinBandwidth, Nullable<int> mainMinEmailIdCount, Nullable<int> mainMinSqlDb, string technologies, string searchText, string currencyCode, Nullable<bool> isOnlySpotlight)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var isPromotionalParameter = isPromotional.HasValue ?
                new ObjectParameter("isPromotional", isPromotional) :
                new ObjectParameter("isPromotional", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var unlimitedValueParameter = unlimitedValue.HasValue ?
                new ObjectParameter("unlimitedValue", unlimitedValue) :
                new ObjectParameter("unlimitedValue", typeof(int));
    
            var mainMinBandwidthParameter = mainMinBandwidth.HasValue ?
                new ObjectParameter("mainMinBandwidth", mainMinBandwidth) :
                new ObjectParameter("mainMinBandwidth", typeof(int));
    
            var mainMinEmailIdCountParameter = mainMinEmailIdCount.HasValue ?
                new ObjectParameter("mainMinEmailIdCount", mainMinEmailIdCount) :
                new ObjectParameter("mainMinEmailIdCount", typeof(int));
    
            var mainMinSqlDbParameter = mainMinSqlDb.HasValue ?
                new ObjectParameter("mainMinSqlDb", mainMinSqlDb) :
                new ObjectParameter("mainMinSqlDb", typeof(int));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getoffersforall_1", priceMinParameter, priceMaxParameter, is24X7SupportParameter, is99UptimeParameter, isPromotionalParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, unlimitedValueParameter, mainMinBandwidthParameter, mainMinEmailIdCountParameter, mainMinSqlDbParameter, technologiesParameter, searchTextParameter, currencyCodeParameter, isOnlySpotlightParameter);
        }
    
        public virtual int Getoffersforcountry(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> countryId, Nullable<int> unlimitedValue, Nullable<int> mainMinBandwidth, Nullable<int> mainMinEmailIdCount, Nullable<int> mainMinSqlDb, string technologies, string currencyCode, string searchText, Nullable<bool> isOnlySpotlight)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var unlimitedValueParameter = unlimitedValue.HasValue ?
                new ObjectParameter("unlimitedValue", unlimitedValue) :
                new ObjectParameter("unlimitedValue", typeof(int));
    
            var mainMinBandwidthParameter = mainMinBandwidth.HasValue ?
                new ObjectParameter("mainMinBandwidth", mainMinBandwidth) :
                new ObjectParameter("mainMinBandwidth", typeof(int));
    
            var mainMinEmailIdCountParameter = mainMinEmailIdCount.HasValue ?
                new ObjectParameter("mainMinEmailIdCount", mainMinEmailIdCount) :
                new ObjectParameter("mainMinEmailIdCount", typeof(int));
    
            var mainMinSqlDbParameter = mainMinSqlDb.HasValue ?
                new ObjectParameter("mainMinSqlDb", mainMinSqlDb) :
                new ObjectParameter("mainMinSqlDb", typeof(int));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getoffersforcountry", priceMinParameter, priceMaxParameter, is24X7SupportParameter, is99UptimeParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, countryIdParameter, unlimitedValueParameter, mainMinBandwidthParameter, mainMinEmailIdCountParameter, mainMinSqlDbParameter, technologiesParameter, currencyCodeParameter, searchTextParameter, isOnlySpotlightParameter);
        }
    
        public virtual int Getoffersforcountry_1(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<bool> isPromotional, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> countryId, Nullable<int> unlimitedValue, Nullable<int> mainMinBandwidth, Nullable<int> mainMinEmailIdCount, Nullable<int> mainMinSqlDb, string technologies, string currencyCode, string searchText, Nullable<bool> isOnlySpotlight)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var isPromotionalParameter = isPromotional.HasValue ?
                new ObjectParameter("isPromotional", isPromotional) :
                new ObjectParameter("isPromotional", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var countryIdParameter = countryId.HasValue ?
                new ObjectParameter("countryId", countryId) :
                new ObjectParameter("countryId", typeof(int));
    
            var unlimitedValueParameter = unlimitedValue.HasValue ?
                new ObjectParameter("unlimitedValue", unlimitedValue) :
                new ObjectParameter("unlimitedValue", typeof(int));
    
            var mainMinBandwidthParameter = mainMinBandwidth.HasValue ?
                new ObjectParameter("mainMinBandwidth", mainMinBandwidth) :
                new ObjectParameter("mainMinBandwidth", typeof(int));
    
            var mainMinEmailIdCountParameter = mainMinEmailIdCount.HasValue ?
                new ObjectParameter("mainMinEmailIdCount", mainMinEmailIdCount) :
                new ObjectParameter("mainMinEmailIdCount", typeof(int));
    
            var mainMinSqlDbParameter = mainMinSqlDb.HasValue ?
                new ObjectParameter("mainMinSqlDb", mainMinSqlDb) :
                new ObjectParameter("mainMinSqlDb", typeof(int));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getoffersforcountry_1", priceMinParameter, priceMaxParameter, is24X7SupportParameter, is99UptimeParameter, isPromotionalParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, countryIdParameter, unlimitedValueParameter, mainMinBandwidthParameter, mainMinEmailIdCountParameter, mainMinSqlDbParameter, technologiesParameter, currencyCodeParameter, searchTextParameter, isOnlySpotlightParameter);
        }
    
        public virtual int Getoffersforregion(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> regionID, Nullable<int> unlimitedValue, Nullable<int> mainMinBandwidth, Nullable<int> mainMinEmailIdCount, Nullable<int> mainMinSqlDb, string technologies, string searchText, string currencyCode, Nullable<bool> isOnlySpotlight)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("regionID", regionID) :
                new ObjectParameter("regionID", typeof(int));
    
            var unlimitedValueParameter = unlimitedValue.HasValue ?
                new ObjectParameter("unlimitedValue", unlimitedValue) :
                new ObjectParameter("unlimitedValue", typeof(int));
    
            var mainMinBandwidthParameter = mainMinBandwidth.HasValue ?
                new ObjectParameter("mainMinBandwidth", mainMinBandwidth) :
                new ObjectParameter("mainMinBandwidth", typeof(int));
    
            var mainMinEmailIdCountParameter = mainMinEmailIdCount.HasValue ?
                new ObjectParameter("mainMinEmailIdCount", mainMinEmailIdCount) :
                new ObjectParameter("mainMinEmailIdCount", typeof(int));
    
            var mainMinSqlDbParameter = mainMinSqlDb.HasValue ?
                new ObjectParameter("mainMinSqlDb", mainMinSqlDb) :
                new ObjectParameter("mainMinSqlDb", typeof(int));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getoffersforregion", priceMinParameter, priceMaxParameter, is24X7SupportParameter, is99UptimeParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, regionIDParameter, unlimitedValueParameter, mainMinBandwidthParameter, mainMinEmailIdCountParameter, mainMinSqlDbParameter, technologiesParameter, searchTextParameter, currencyCodeParameter, isOnlySpotlightParameter);
        }
    
        public virtual int Getoffersforregion_1(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<bool> isPromotional, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> regionID, Nullable<int> unlimitedValue, Nullable<int> mainMinBandwidth, Nullable<int> mainMinEmailIdCount, Nullable<int> mainMinSqlDb, string technologies, string searchText, string currencyCode, Nullable<bool> isOnlySpotlight)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var isPromotionalParameter = isPromotional.HasValue ?
                new ObjectParameter("isPromotional", isPromotional) :
                new ObjectParameter("isPromotional", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("regionID", regionID) :
                new ObjectParameter("regionID", typeof(int));
    
            var unlimitedValueParameter = unlimitedValue.HasValue ?
                new ObjectParameter("unlimitedValue", unlimitedValue) :
                new ObjectParameter("unlimitedValue", typeof(int));
    
            var mainMinBandwidthParameter = mainMinBandwidth.HasValue ?
                new ObjectParameter("mainMinBandwidth", mainMinBandwidth) :
                new ObjectParameter("mainMinBandwidth", typeof(int));
    
            var mainMinEmailIdCountParameter = mainMinEmailIdCount.HasValue ?
                new ObjectParameter("mainMinEmailIdCount", mainMinEmailIdCount) :
                new ObjectParameter("mainMinEmailIdCount", typeof(int));
    
            var mainMinSqlDbParameter = mainMinSqlDb.HasValue ?
                new ObjectParameter("mainMinSqlDb", mainMinSqlDb) :
                new ObjectParameter("mainMinSqlDb", typeof(int));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Getoffersforregion_1", priceMinParameter, priceMaxParameter, is24X7SupportParameter, is99UptimeParameter, isPromotionalParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, regionIDParameter, unlimitedValueParameter, mainMinBandwidthParameter, mainMinEmailIdCountParameter, mainMinSqlDbParameter, technologiesParameter, searchTextParameter, currencyCodeParameter, isOnlySpotlightParameter);
        }
    
        public virtual int GetProdDownloadCount(Nullable<System.DateTime> whenStart, Nullable<System.DateTime> whenEnd, string prodID, string version, string architectureName, string language, string country, string referrer)
        {
            var whenStartParameter = whenStart.HasValue ?
                new ObjectParameter("WhenStart", whenStart) :
                new ObjectParameter("WhenStart", typeof(System.DateTime));
    
            var whenEndParameter = whenEnd.HasValue ?
                new ObjectParameter("WhenEnd", whenEnd) :
                new ObjectParameter("WhenEnd", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var architectureNameParameter = architectureName != null ?
                new ObjectParameter("ArchitectureName", architectureName) :
                new ObjectParameter("ArchitectureName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProdDownloadCount", whenStartParameter, whenEndParameter, prodIDParameter, versionParameter, architectureNameParameter, languageParameter, countryParameter, referrerParameter);
        }
    
        public virtual ObjectResult<GetRelatedTags_Result> GetRelatedTags(string tag)
        {
            var tagParameter = tag != null ?
                new ObjectParameter("Tag", tag) :
                new ObjectParameter("Tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRelatedTags_Result>("GetRelatedTags", tagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSearchData(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> isRegion, Nullable<int> countryID, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> pageCount, string searchText, Nullable<int> currentPageIndex, Nullable<int> pageSize, Nullable<int> sortType, Nullable<bool> isFirstTime, string technologies, string technologyFieldIDs, string currencyCode, Nullable<bool> isOnlySpotlight, ObjectParameter totalRecords, ObjectParameter isBubble, ObjectParameter bubbleID)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var isRegionParameter = isRegion.HasValue ?
                new ObjectParameter("isRegion", isRegion) :
                new ObjectParameter("isRegion", typeof(bool));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("pageCount", pageCount) :
                new ObjectParameter("pageCount", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("currentPageIndex", currentPageIndex) :
                new ObjectParameter("currentPageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var sortTypeParameter = sortType.HasValue ?
                new ObjectParameter("sortType", sortType) :
                new ObjectParameter("sortType", typeof(int));
    
            var isFirstTimeParameter = isFirstTime.HasValue ?
                new ObjectParameter("isFirstTime", isFirstTime) :
                new ObjectParameter("isFirstTime", typeof(bool));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var technologyFieldIDsParameter = technologyFieldIDs != null ?
                new ObjectParameter("technologyFieldIDs", technologyFieldIDs) :
                new ObjectParameter("technologyFieldIDs", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSearchData", priceMinParameter, priceMaxParameter, isRegionParameter, countryIDParameter, is24X7SupportParameter, is99UptimeParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, pageCountParameter, searchTextParameter, currentPageIndexParameter, pageSizeParameter, sortTypeParameter, isFirstTimeParameter, technologiesParameter, technologyFieldIDsParameter, currencyCodeParameter, isOnlySpotlightParameter, totalRecords, isBubble, bubbleID);
        }
    
        public virtual ObjectResult<Nullable<int>> GetSearchDataNew(Nullable<double> priceMin, Nullable<double> priceMax, Nullable<bool> isRegion, Nullable<int> countryID, Nullable<bool> is24X7Support, Nullable<bool> is99Uptime, Nullable<bool> isPromotional, Nullable<int> hardDiskSpaceMin, Nullable<int> hardDiskSpaceMax, Nullable<int> sqlDatabasesMin, Nullable<int> sqlDatabasesMax, Nullable<int> emailAccountsMin, Nullable<int> emailAccountsMax, Nullable<int> bandwidthMin, Nullable<int> bandwidthMax, Nullable<int> offerType, Nullable<int> pageCount, string searchText, Nullable<int> currentPageIndex, Nullable<int> pageSize, Nullable<int> sortType, Nullable<bool> isFirstTime, string technologies, string technologyFieldIDs, string currencyCode, Nullable<bool> isOnlySpotlight, ObjectParameter totalRecords, ObjectParameter isBubble, ObjectParameter bubbleID)
        {
            var priceMinParameter = priceMin.HasValue ?
                new ObjectParameter("priceMin", priceMin) :
                new ObjectParameter("priceMin", typeof(double));
    
            var priceMaxParameter = priceMax.HasValue ?
                new ObjectParameter("priceMax", priceMax) :
                new ObjectParameter("priceMax", typeof(double));
    
            var isRegionParameter = isRegion.HasValue ?
                new ObjectParameter("isRegion", isRegion) :
                new ObjectParameter("isRegion", typeof(bool));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var is24X7SupportParameter = is24X7Support.HasValue ?
                new ObjectParameter("is24X7Support", is24X7Support) :
                new ObjectParameter("is24X7Support", typeof(bool));
    
            var is99UptimeParameter = is99Uptime.HasValue ?
                new ObjectParameter("is99Uptime", is99Uptime) :
                new ObjectParameter("is99Uptime", typeof(bool));
    
            var isPromotionalParameter = isPromotional.HasValue ?
                new ObjectParameter("isPromotional", isPromotional) :
                new ObjectParameter("isPromotional", typeof(bool));
    
            var hardDiskSpaceMinParameter = hardDiskSpaceMin.HasValue ?
                new ObjectParameter("hardDiskSpaceMin", hardDiskSpaceMin) :
                new ObjectParameter("hardDiskSpaceMin", typeof(int));
    
            var hardDiskSpaceMaxParameter = hardDiskSpaceMax.HasValue ?
                new ObjectParameter("hardDiskSpaceMax", hardDiskSpaceMax) :
                new ObjectParameter("hardDiskSpaceMax", typeof(int));
    
            var sqlDatabasesMinParameter = sqlDatabasesMin.HasValue ?
                new ObjectParameter("sqlDatabasesMin", sqlDatabasesMin) :
                new ObjectParameter("sqlDatabasesMin", typeof(int));
    
            var sqlDatabasesMaxParameter = sqlDatabasesMax.HasValue ?
                new ObjectParameter("sqlDatabasesMax", sqlDatabasesMax) :
                new ObjectParameter("sqlDatabasesMax", typeof(int));
    
            var emailAccountsMinParameter = emailAccountsMin.HasValue ?
                new ObjectParameter("emailAccountsMin", emailAccountsMin) :
                new ObjectParameter("emailAccountsMin", typeof(int));
    
            var emailAccountsMaxParameter = emailAccountsMax.HasValue ?
                new ObjectParameter("emailAccountsMax", emailAccountsMax) :
                new ObjectParameter("emailAccountsMax", typeof(int));
    
            var bandwidthMinParameter = bandwidthMin.HasValue ?
                new ObjectParameter("bandwidthMin", bandwidthMin) :
                new ObjectParameter("bandwidthMin", typeof(int));
    
            var bandwidthMaxParameter = bandwidthMax.HasValue ?
                new ObjectParameter("bandwidthMax", bandwidthMax) :
                new ObjectParameter("bandwidthMax", typeof(int));
    
            var offerTypeParameter = offerType.HasValue ?
                new ObjectParameter("offerType", offerType) :
                new ObjectParameter("offerType", typeof(int));
    
            var pageCountParameter = pageCount.HasValue ?
                new ObjectParameter("pageCount", pageCount) :
                new ObjectParameter("pageCount", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("searchText", searchText) :
                new ObjectParameter("searchText", typeof(string));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("currentPageIndex", currentPageIndex) :
                new ObjectParameter("currentPageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("pageSize", pageSize) :
                new ObjectParameter("pageSize", typeof(int));
    
            var sortTypeParameter = sortType.HasValue ?
                new ObjectParameter("sortType", sortType) :
                new ObjectParameter("sortType", typeof(int));
    
            var isFirstTimeParameter = isFirstTime.HasValue ?
                new ObjectParameter("isFirstTime", isFirstTime) :
                new ObjectParameter("isFirstTime", typeof(bool));
    
            var technologiesParameter = technologies != null ?
                new ObjectParameter("technologies", technologies) :
                new ObjectParameter("technologies", typeof(string));
    
            var technologyFieldIDsParameter = technologyFieldIDs != null ?
                new ObjectParameter("technologyFieldIDs", technologyFieldIDs) :
                new ObjectParameter("technologyFieldIDs", typeof(string));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetSearchDataNew", priceMinParameter, priceMaxParameter, isRegionParameter, countryIDParameter, is24X7SupportParameter, is99UptimeParameter, isPromotionalParameter, hardDiskSpaceMinParameter, hardDiskSpaceMaxParameter, sqlDatabasesMinParameter, sqlDatabasesMaxParameter, emailAccountsMinParameter, emailAccountsMaxParameter, bandwidthMinParameter, bandwidthMaxParameter, offerTypeParameter, pageCountParameter, searchTextParameter, currentPageIndexParameter, pageSizeParameter, sortTypeParameter, isFirstTimeParameter, technologiesParameter, technologyFieldIDsParameter, currencyCodeParameter, isOnlySpotlightParameter, totalRecords, isBubble, bubbleID);
        }
    
        public virtual ObjectResult<GetSliderValues_Result> GetSliderValues(Nullable<int> hostingTypeID, Nullable<int> countryID, Nullable<bool> isRegion, string currencyCode, Nullable<bool> isOnlySpotlight)
        {
            var hostingTypeIDParameter = hostingTypeID.HasValue ?
                new ObjectParameter("hostingTypeID", hostingTypeID) :
                new ObjectParameter("hostingTypeID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("countryID", countryID) :
                new ObjectParameter("countryID", typeof(int));
    
            var isRegionParameter = isRegion.HasValue ?
                new ObjectParameter("isRegion", isRegion) :
                new ObjectParameter("isRegion", typeof(bool));
    
            var currencyCodeParameter = currencyCode != null ?
                new ObjectParameter("currencyCode", currencyCode) :
                new ObjectParameter("currencyCode", typeof(string));
    
            var isOnlySpotlightParameter = isOnlySpotlight.HasValue ?
                new ObjectParameter("isOnlySpotlight", isOnlySpotlight) :
                new ObjectParameter("isOnlySpotlight", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSliderValues_Result>("GetSliderValues", hostingTypeIDParameter, countryIDParameter, isRegionParameter, currencyCodeParameter, isOnlySpotlightParameter);
        }
    
        public virtual ObjectResult<GetSubmittedDataForProductOrApp_Result> GetSubmittedDataForProductOrApp(Nullable<int> submissionID)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubmittedDataForProductOrApp_Result>("GetSubmittedDataForProductOrApp", submissionIDParameter);
        }
    
        public virtual ObjectResult<GetTag_Result> GetTag(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("ContentId", contentId) :
                new ObjectParameter("ContentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTag_Result>("GetTag", contentIdParameter);
        }
    
        public virtual ObjectResult<GetTransactions_Result> GetTransactions(Nullable<int> submissionID, Nullable<System.DateTime> whenStart, Nullable<System.DateTime> whenEnd)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var whenStartParameter = whenStart.HasValue ?
                new ObjectParameter("WhenStart", whenStart) :
                new ObjectParameter("WhenStart", typeof(System.DateTime));
    
            var whenEndParameter = whenEnd.HasValue ?
                new ObjectParameter("WhenEnd", whenEnd) :
                new ObjectParameter("WhenEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactions_Result>("GetTransactions", submissionIDParameter, whenStartParameter, whenEndParameter);
        }
    
        public virtual ObjectResult<GetTransactionTypes_Result> GetTransactionTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransactionTypes_Result>("GetTransactionTypes");
        }
    
        public virtual int IncrementAppDownloadCount(Nullable<System.DateTime> when, string appID, string version, string architectureName, string language, string country, string referrer, Nullable<int> increment, Nullable<bool> validated)
        {
            var whenParameter = when.HasValue ?
                new ObjectParameter("When", when) :
                new ObjectParameter("When", typeof(System.DateTime));
    
            var appIDParameter = appID != null ?
                new ObjectParameter("AppID", appID) :
                new ObjectParameter("AppID", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var architectureNameParameter = architectureName != null ?
                new ObjectParameter("ArchitectureName", architectureName) :
                new ObjectParameter("ArchitectureName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            var incrementParameter = increment.HasValue ?
                new ObjectParameter("Increment", increment) :
                new ObjectParameter("Increment", typeof(int));
    
            var validatedParameter = validated.HasValue ?
                new ObjectParameter("Validated", validated) :
                new ObjectParameter("Validated", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncrementAppDownloadCount", whenParameter, appIDParameter, versionParameter, architectureNameParameter, languageParameter, countryParameter, referrerParameter, incrementParameter, validatedParameter);
        }
    
        public virtual int IncrementProdDownloadCount(Nullable<System.DateTime> when, string prodID, string version, string architectureName, string language, string country, string referrer, Nullable<int> increment, Nullable<bool> validated)
        {
            var whenParameter = when.HasValue ?
                new ObjectParameter("When", when) :
                new ObjectParameter("When", typeof(System.DateTime));
    
            var prodIDParameter = prodID != null ?
                new ObjectParameter("ProdID", prodID) :
                new ObjectParameter("ProdID", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var architectureNameParameter = architectureName != null ?
                new ObjectParameter("ArchitectureName", architectureName) :
                new ObjectParameter("ArchitectureName", typeof(string));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var referrerParameter = referrer != null ?
                new ObjectParameter("Referrer", referrer) :
                new ObjectParameter("Referrer", typeof(string));
    
            var incrementParameter = increment.HasValue ?
                new ObjectParameter("Increment", increment) :
                new ObjectParameter("Increment", typeof(int));
    
            var validatedParameter = validated.HasValue ?
                new ObjectParameter("Validated", validated) :
                new ObjectParameter("Validated", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IncrementProdDownloadCount", whenParameter, prodIDParameter, versionParameter, architectureNameParameter, languageParameter, countryParameter, referrerParameter, incrementParameter, validatedParameter);
        }
    
        public virtual int InsertChapterLog(Nullable<int> trainingLogId, Nullable<int> chapter, Nullable<bool> click)
        {
            var trainingLogIdParameter = trainingLogId.HasValue ?
                new ObjectParameter("trainingLogId", trainingLogId) :
                new ObjectParameter("trainingLogId", typeof(int));
    
            var chapterParameter = chapter.HasValue ?
                new ObjectParameter("chapter", chapter) :
                new ObjectParameter("chapter", typeof(int));
    
            var clickParameter = click.HasValue ?
                new ObjectParameter("click", click) :
                new ObjectParameter("click", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertChapterLog", trainingLogIdParameter, chapterParameter, clickParameter);
        }
    
        public virtual int InsertComment(string contentId, Nullable<System.DateTime> dateAdded, string puid, string comment)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("dateAdded", dateAdded) :
                new ObjectParameter("dateAdded", typeof(System.DateTime));
    
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertComment", contentIdParameter, dateAddedParameter, puidParameter, commentParameter);
        }
    
        public virtual int InsertContentIndex(string contentId, Nullable<bool> isFeatured, Nullable<System.DateTime> dateAdded, string channel)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var isFeaturedParameter = isFeatured.HasValue ?
                new ObjectParameter("isFeatured", isFeatured) :
                new ObjectParameter("isFeatured", typeof(bool));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("dateAdded", dateAdded) :
                new ObjectParameter("dateAdded", typeof(System.DateTime));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertContentIndex", contentIdParameter, isFeaturedParameter, dateAddedParameter, channelParameter);
        }
    
        public virtual int InsertPageView(string puid, string contentId, Nullable<System.DateTime> timeStamp, string contentTitle)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var contentTitleParameter = contentTitle != null ?
                new ObjectParameter("contentTitle", contentTitle) :
                new ObjectParameter("contentTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPageView", puidParameter, contentIdParameter, timeStampParameter, contentTitleParameter);
        }
    
        public virtual int InsertPullQuotes(string name, string quote, Nullable<System.DateTime> dateAdded, Nullable<bool> active)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var quoteParameter = quote != null ?
                new ObjectParameter("Quote", quote) :
                new ObjectParameter("Quote", typeof(string));
    
            var dateAddedParameter = dateAdded.HasValue ?
                new ObjectParameter("dateAdded", dateAdded) :
                new ObjectParameter("dateAdded", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("active", active) :
                new ObjectParameter("active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPullQuotes", nameParameter, quoteParameter, dateAddedParameter, activeParameter);
        }
    
        public virtual int InsertRating(string contentId, string puid, Nullable<System.DateTime> timeStamp, Nullable<byte> rating)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var ratingParameter = rating.HasValue ?
                new ObjectParameter("rating", rating) :
                new ObjectParameter("rating", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRating", contentIdParameter, puidParameter, timeStampParameter, ratingParameter);
        }
    
        public virtual int InsertSubmissionOwner(Nullable<int> submitterID, Nullable<int> submissionID)
        {
            var submitterIDParameter = submitterID.HasValue ?
                new ObjectParameter("SubmitterID", submitterID) :
                new ObjectParameter("SubmitterID", typeof(int));
    
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSubmissionOwner", submitterIDParameter, submissionIDParameter);
        }
    
        public virtual int InsertTagClick(string tag, Nullable<System.DateTime> timeStamp, string channel, string source)
        {
            var tagParameter = tag != null ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(string));
    
            var timeStampParameter = timeStamp.HasValue ?
                new ObjectParameter("timeStamp", timeStamp) :
                new ObjectParameter("timeStamp", typeof(System.DateTime));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("source", source) :
                new ObjectParameter("source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTagClick", tagParameter, timeStampParameter, channelParameter, sourceParameter);
        }
    
        public virtual int InsertTags(string tag, string tagType, string contentId)
        {
            var tagParameter = tag != null ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(string));
    
            var tagTypeParameter = tagType != null ?
                new ObjectParameter("tagType", tagType) :
                new ObjectParameter("tagType", typeof(string));
    
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTags", tagParameter, tagTypeParameter, contentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertTrainingLog(Nullable<System.DateTime> dateLoaded, string contentId, Nullable<bool> silverlightLoad, Nullable<int> chapters)
        {
            var dateLoadedParameter = dateLoaded.HasValue ?
                new ObjectParameter("dateLoaded", dateLoaded) :
                new ObjectParameter("dateLoaded", typeof(System.DateTime));
    
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            var silverlightLoadParameter = silverlightLoad.HasValue ?
                new ObjectParameter("silverlightLoad", silverlightLoad) :
                new ObjectParameter("silverlightLoad", typeof(bool));
    
            var chaptersParameter = chapters.HasValue ?
                new ObjectParameter("chapters", chapters) :
                new ObjectParameter("chapters", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertTrainingLog", dateLoadedParameter, contentIdParameter, silverlightLoadParameter, chaptersParameter);
        }
    
        public virtual int InsertTransaction(Nullable<int> submissionID, Nullable<int> submissionTaskID, string description)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var submissionTaskIDParameter = submissionTaskID.HasValue ?
                new ObjectParameter("SubmissionTaskID", submissionTaskID) :
                new ObjectParameter("SubmissionTaskID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTransaction", submissionIDParameter, submissionTaskIDParameter, descriptionParameter);
        }
    
        public virtual int InsertUser(string puid, Nullable<System.DateTime> dateCreated, Nullable<System.DateTime> dateLastAccessed, Nullable<System.DateTime> dateActivated, string customLenses, Nullable<bool> showFullProfile, string firstName, string lastName, string title, string company, string companyUrl, string city, Nullable<int> regionid, string state, string countrycode, string country)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            var dateLastAccessedParameter = dateLastAccessed.HasValue ?
                new ObjectParameter("dateLastAccessed", dateLastAccessed) :
                new ObjectParameter("dateLastAccessed", typeof(System.DateTime));
    
            var dateActivatedParameter = dateActivated.HasValue ?
                new ObjectParameter("dateActivated", dateActivated) :
                new ObjectParameter("dateActivated", typeof(System.DateTime));
    
            var customLensesParameter = customLenses != null ?
                new ObjectParameter("customLenses", customLenses) :
                new ObjectParameter("customLenses", typeof(string));
    
            var showFullProfileParameter = showFullProfile.HasValue ?
                new ObjectParameter("showFullProfile", showFullProfile) :
                new ObjectParameter("showFullProfile", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var companyUrlParameter = companyUrl != null ?
                new ObjectParameter("companyUrl", companyUrl) :
                new ObjectParameter("companyUrl", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var regionidParameter = regionid.HasValue ?
                new ObjectParameter("regionid", regionid) :
                new ObjectParameter("regionid", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countrycodeParameter = countrycode != null ?
                new ObjectParameter("countrycode", countrycode) :
                new ObjectParameter("countrycode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUser", puidParameter, dateCreatedParameter, dateLastAccessedParameter, dateActivatedParameter, customLensesParameter, showFullProfileParameter, firstNameParameter, lastNameParameter, titleParameter, companyParameter, companyUrlParameter, cityParameter, regionidParameter, stateParameter, countrycodeParameter, countryParameter);
        }
    
        public virtual int msi_UpdateUser(string puid, string title, string company, string companyUrl, string city, string state, string country)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var companyUrlParameter = companyUrl != null ?
                new ObjectParameter("companyUrl", companyUrl) :
                new ObjectParameter("companyUrl", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("msi_UpdateUser", puidParameter, titleParameter, companyParameter, companyUrlParameter, cityParameter, stateParameter, countryParameter);
        }
    
        public virtual int RefreshSyncTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RefreshSyncTables");
        }
    
        public virtual int ResetTagClick(string tag)
        {
            var tagParameter = tag != null ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetTagClick", tagParameter);
        }
    
        public virtual ObjectResult<SelectAllReportingTables_Result> SelectAllReportingTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectAllReportingTables_Result>("SelectAllReportingTables");
        }
    
        public virtual ObjectResult<string> SelectBlogPosts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SelectBlogPosts");
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> SelectBlogPostsLastUpdated()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("SelectBlogPostsLastUpdated");
        }
    
        public virtual ObjectResult<SelectChapterLog_Result> SelectChapterLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectChapterLog_Result>("SelectChapterLog");
        }
    
        public virtual ObjectResult<Nullable<int>> SelectCommentCount(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelectCommentCount", contentIdParameter);
        }
    
        public virtual ObjectResult<SelectComments_Result> SelectComments(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectComments_Result>("SelectComments", contentIdParameter);
        }
    
        public virtual ObjectResult<string> SelectContentByTag(string tag, Nullable<int> numberOfRecords)
        {
            var tagParameter = tag != null ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(string));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("numberOfRecords", numberOfRecords) :
                new ObjectParameter("numberOfRecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SelectContentByTag", tagParameter, numberOfRecordsParameter);
        }
    
        public virtual ObjectResult<SelectContentCounts_Result> SelectContentCounts(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectContentCounts_Result>("SelectContentCounts", contentIdParameter);
        }
    
        public virtual int SelectContentItems(string channel, string lenses, string tags, string author, string location)
        {
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var lensesParameter = lenses != null ?
                new ObjectParameter("lenses", lenses) :
                new ObjectParameter("lenses", typeof(string));
    
            var tagsParameter = tags != null ?
                new ObjectParameter("tags", tags) :
                new ObjectParameter("tags", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectContentItems", channelParameter, lensesParameter, tagsParameter, authorParameter, locationParameter);
        }
    
        public virtual ObjectResult<SelectContentItemsAll_Result> SelectContentItemsAll(Nullable<int> numberOfRecords, string channel, Nullable<bool> isFeatured)
        {
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("numberOfRecords", numberOfRecords) :
                new ObjectParameter("numberOfRecords", typeof(int));
    
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var isFeaturedParameter = isFeatured.HasValue ?
                new ObjectParameter("isFeatured", isFeatured) :
                new ObjectParameter("isFeatured", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectContentItemsAll_Result>("SelectContentItemsAll", numberOfRecordsParameter, channelParameter, isFeaturedParameter);
        }
    
        public virtual int SelectContentItemsExclude(string channel, string lenses, string tags, string author, string location)
        {
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var lensesParameter = lenses != null ?
                new ObjectParameter("lenses", lenses) :
                new ObjectParameter("lenses", typeof(string));
    
            var tagsParameter = tags != null ?
                new ObjectParameter("tags", tags) :
                new ObjectParameter("tags", typeof(string));
    
            var authorParameter = author != null ?
                new ObjectParameter("author", author) :
                new ObjectParameter("author", typeof(string));
    
            var locationParameter = location != null ?
                new ObjectParameter("location", location) :
                new ObjectParameter("location", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectContentItemsExclude", channelParameter, lensesParameter, tagsParameter, authorParameter, locationParameter);
        }
    
        public virtual ObjectResult<SelectFeaturedContent_Result> SelectFeaturedContent(string channel, string tag)
        {
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var tagParameter = tag != null ?
                new ObjectParameter("tag", tag) :
                new ObjectParameter("tag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectFeaturedContent_Result>("SelectFeaturedContent", channelParameter, tagParameter);
        }
    
        public virtual ObjectResult<SelectPageViews_Result> SelectPageViews(string puid, Nullable<int> numberOfRecords)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("numberOfRecords", numberOfRecords) :
                new ObjectParameter("numberOfRecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectPageViews_Result>("SelectPageViews", puidParameter, numberOfRecordsParameter);
        }
    
        public virtual ObjectResult<string> SelectPublicUsers(Nullable<int> numberOfRecords)
        {
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("numberOfRecords", numberOfRecords) :
                new ObjectParameter("numberOfRecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SelectPublicUsers", numberOfRecordsParameter);
        }
    
        public virtual ObjectResult<SelectRandomPullQuote_Result> SelectRandomPullQuote()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectRandomPullQuote_Result>("SelectRandomPullQuote");
        }
    
        public virtual ObjectResult<Nullable<int>> SelectRating(string contentId)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("contentId", contentId) :
                new ObjectParameter("contentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SelectRating", contentIdParameter);
        }
    
        public virtual ObjectResult<Nullable<byte>> SelectRatingByReviewer(string contentId, string puid)
        {
            var contentIdParameter = contentId != null ?
                new ObjectParameter("ContentId", contentId) :
                new ObjectParameter("ContentId", typeof(string));
    
            var puidParameter = puid != null ?
                new ObjectParameter("Puid", puid) :
                new ObjectParameter("Puid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<byte>>("SelectRatingByReviewer", contentIdParameter, puidParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> SelectSiteSettingsGuid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("SelectSiteSettingsGuid");
        }
    
        public virtual ObjectResult<string> SelectTags()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SelectTags");
        }
    
        public virtual ObjectResult<SelectTopFeaturedContents_Result> SelectTopFeaturedContents(string channel)
        {
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTopFeaturedContents_Result>("SelectTopFeaturedContents", channelParameter);
        }
    
        public virtual ObjectResult<SelectTopTags_Result> SelectTopTags(string channel, Nullable<int> numberOfRecords)
        {
            var channelParameter = channel != null ?
                new ObjectParameter("channel", channel) :
                new ObjectParameter("channel", typeof(string));
    
            var numberOfRecordsParameter = numberOfRecords.HasValue ?
                new ObjectParameter("numberOfRecords", numberOfRecords) :
                new ObjectParameter("numberOfRecords", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTopTags_Result>("SelectTopTags", channelParameter, numberOfRecordsParameter);
        }
    
        public virtual ObjectResult<SelectTrainingLog_Result> SelectTrainingLog()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTrainingLog_Result>("SelectTrainingLog");
        }
    
        public virtual ObjectResult<SelectUser_Result> SelectUser(string puid)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectUser_Result>("SelectUser", puidParameter);
        }
    
        public virtual int SetImage(byte[] data, Nullable<System.Guid> imageGUID)
        {
            var dataParameter = data != null ?
                new ObjectParameter("Data", data) :
                new ObjectParameter("Data", typeof(byte[]));
    
            var imageGUIDParameter = imageGUID.HasValue ?
                new ObjectParameter("ImageGUID", imageGUID) :
                new ObjectParameter("ImageGUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetImage", dataParameter, imageGUIDParameter);
        }
    
        public virtual int SetPackage(Nullable<int> submissionID, string architectureTypeName, Nullable<int> packageID, string packageURL, string startPage, string mD5Hash, string sHA1Hash, Nullable<int> fileSize, string language)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var architectureTypeNameParameter = architectureTypeName != null ?
                new ObjectParameter("ArchitectureTypeName", architectureTypeName) :
                new ObjectParameter("ArchitectureTypeName", typeof(string));
    
            var packageIDParameter = packageID.HasValue ?
                new ObjectParameter("PackageID", packageID) :
                new ObjectParameter("PackageID", typeof(int));
    
            var packageURLParameter = packageURL != null ?
                new ObjectParameter("PackageURL", packageURL) :
                new ObjectParameter("PackageURL", typeof(string));
    
            var startPageParameter = startPage != null ?
                new ObjectParameter("StartPage", startPage) :
                new ObjectParameter("StartPage", typeof(string));
    
            var mD5HashParameter = mD5Hash != null ?
                new ObjectParameter("MD5Hash", mD5Hash) :
                new ObjectParameter("MD5Hash", typeof(string));
    
            var sHA1HashParameter = sHA1Hash != null ?
                new ObjectParameter("SHA1Hash", sHA1Hash) :
                new ObjectParameter("SHA1Hash", typeof(string));
    
            var fileSizeParameter = fileSize.HasValue ?
                new ObjectParameter("FileSize", fileSize) :
                new ObjectParameter("FileSize", typeof(int));
    
            var languageParameter = language != null ?
                new ObjectParameter("Language", language) :
                new ObjectParameter("Language", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetPackage", submissionIDParameter, architectureTypeNameParameter, packageIDParameter, packageURLParameter, startPageParameter, mD5HashParameter, sHA1HashParameter, fileSizeParameter, languageParameter);
        }
    
        public virtual int TargetedUpdateOfProductOrAppData(Nullable<int> submissionID, string submittingEntityURL, string appURL, string supportURL, byte[] logoBits, Nullable<System.Guid> logoGUID, byte[] screenshotBits1, Nullable<System.Guid> screenshotGUID1, byte[] screenshotBits2, Nullable<System.Guid> screenshotGUID2, byte[] screenshotBits3, Nullable<System.Guid> screenshotGUID3, byte[] screenshotBits4, Nullable<System.Guid> screenshotGUID4, byte[] screenshotBits5, Nullable<System.Guid> screenshotGUID5, byte[] screenshotBits6, Nullable<System.Guid> screenshotGUID6, string professionalServicesURL, string commercialProductURL)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var submittingEntityURLParameter = submittingEntityURL != null ?
                new ObjectParameter("SubmittingEntityURL", submittingEntityURL) :
                new ObjectParameter("SubmittingEntityURL", typeof(string));
    
            var appURLParameter = appURL != null ?
                new ObjectParameter("AppURL", appURL) :
                new ObjectParameter("AppURL", typeof(string));
    
            var supportURLParameter = supportURL != null ?
                new ObjectParameter("SupportURL", supportURL) :
                new ObjectParameter("SupportURL", typeof(string));
    
            var logoBitsParameter = logoBits != null ?
                new ObjectParameter("LogoBits", logoBits) :
                new ObjectParameter("LogoBits", typeof(byte[]));
    
            var logoGUIDParameter = logoGUID.HasValue ?
                new ObjectParameter("LogoGUID", logoGUID) :
                new ObjectParameter("LogoGUID", typeof(System.Guid));
    
            var screenshotBits1Parameter = screenshotBits1 != null ?
                new ObjectParameter("ScreenshotBits1", screenshotBits1) :
                new ObjectParameter("ScreenshotBits1", typeof(byte[]));
    
            var screenshotGUID1Parameter = screenshotGUID1.HasValue ?
                new ObjectParameter("ScreenshotGUID1", screenshotGUID1) :
                new ObjectParameter("ScreenshotGUID1", typeof(System.Guid));
    
            var screenshotBits2Parameter = screenshotBits2 != null ?
                new ObjectParameter("ScreenshotBits2", screenshotBits2) :
                new ObjectParameter("ScreenshotBits2", typeof(byte[]));
    
            var screenshotGUID2Parameter = screenshotGUID2.HasValue ?
                new ObjectParameter("ScreenshotGUID2", screenshotGUID2) :
                new ObjectParameter("ScreenshotGUID2", typeof(System.Guid));
    
            var screenshotBits3Parameter = screenshotBits3 != null ?
                new ObjectParameter("ScreenshotBits3", screenshotBits3) :
                new ObjectParameter("ScreenshotBits3", typeof(byte[]));
    
            var screenshotGUID3Parameter = screenshotGUID3.HasValue ?
                new ObjectParameter("ScreenshotGUID3", screenshotGUID3) :
                new ObjectParameter("ScreenshotGUID3", typeof(System.Guid));
    
            var screenshotBits4Parameter = screenshotBits4 != null ?
                new ObjectParameter("ScreenshotBits4", screenshotBits4) :
                new ObjectParameter("ScreenshotBits4", typeof(byte[]));
    
            var screenshotGUID4Parameter = screenshotGUID4.HasValue ?
                new ObjectParameter("ScreenshotGUID4", screenshotGUID4) :
                new ObjectParameter("ScreenshotGUID4", typeof(System.Guid));
    
            var screenshotBits5Parameter = screenshotBits5 != null ?
                new ObjectParameter("ScreenshotBits5", screenshotBits5) :
                new ObjectParameter("ScreenshotBits5", typeof(byte[]));
    
            var screenshotGUID5Parameter = screenshotGUID5.HasValue ?
                new ObjectParameter("ScreenshotGUID5", screenshotGUID5) :
                new ObjectParameter("ScreenshotGUID5", typeof(System.Guid));
    
            var screenshotBits6Parameter = screenshotBits6 != null ?
                new ObjectParameter("ScreenshotBits6", screenshotBits6) :
                new ObjectParameter("ScreenshotBits6", typeof(byte[]));
    
            var screenshotGUID6Parameter = screenshotGUID6.HasValue ?
                new ObjectParameter("ScreenshotGUID6", screenshotGUID6) :
                new ObjectParameter("ScreenshotGUID6", typeof(System.Guid));
    
            var professionalServicesURLParameter = professionalServicesURL != null ?
                new ObjectParameter("ProfessionalServicesURL", professionalServicesURL) :
                new ObjectParameter("ProfessionalServicesURL", typeof(string));
    
            var commercialProductURLParameter = commercialProductURL != null ?
                new ObjectParameter("CommercialProductURL", commercialProductURL) :
                new ObjectParameter("CommercialProductURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TargetedUpdateOfProductOrAppData", submissionIDParameter, submittingEntityURLParameter, appURLParameter, supportURLParameter, logoBitsParameter, logoGUIDParameter, screenshotBits1Parameter, screenshotGUID1Parameter, screenshotBits2Parameter, screenshotGUID2Parameter, screenshotBits3Parameter, screenshotGUID3Parameter, screenshotBits4Parameter, screenshotGUID4Parameter, screenshotBits5Parameter, screenshotGUID5Parameter, screenshotBits6Parameter, screenshotGUID6Parameter, professionalServicesURLParameter, commercialProductURLParameter);
        }
    
        public virtual int UpdateBlogPosts(string xml, Nullable<System.DateTime> dateLastUpdated)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var dateLastUpdatedParameter = dateLastUpdated.HasValue ?
                new ObjectParameter("dateLastUpdated", dateLastUpdated) :
                new ObjectParameter("dateLastUpdated", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBlogPosts", xmlParameter, dateLastUpdatedParameter);
        }
    
        public virtual int UpdateCommentModeration(Nullable<int> commentId, Nullable<System.DateTime> dateRemoved, Nullable<bool> removeFlag)
        {
            var commentIdParameter = commentId.HasValue ?
                new ObjectParameter("commentId", commentId) :
                new ObjectParameter("commentId", typeof(int));
    
            var dateRemovedParameter = dateRemoved.HasValue ?
                new ObjectParameter("dateRemoved", dateRemoved) :
                new ObjectParameter("dateRemoved", typeof(System.DateTime));
    
            var removeFlagParameter = removeFlag.HasValue ?
                new ObjectParameter("removeFlag", removeFlag) :
                new ObjectParameter("removeFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCommentModeration", commentIdParameter, dateRemovedParameter, removeFlagParameter);
        }
    
        public virtual int UpdateSiteSettingsGuid(Nullable<System.Guid> guid)
        {
            var guidParameter = guid.HasValue ?
                new ObjectParameter("guid", guid) :
                new ObjectParameter("guid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSiteSettingsGuid", guidParameter);
        }
    
        public virtual int UpdateSubmissionDashboardValues(Nullable<int> submissionID, Nullable<int> submissionStateID)
        {
            var submissionIDParameter = submissionID.HasValue ?
                new ObjectParameter("SubmissionID", submissionID) :
                new ObjectParameter("SubmissionID", typeof(int));
    
            var submissionStateIDParameter = submissionStateID.HasValue ?
                new ObjectParameter("SubmissionStateID", submissionStateID) :
                new ObjectParameter("SubmissionStateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSubmissionDashboardValues", submissionIDParameter, submissionStateIDParameter);
        }
    
        public virtual int UpdateTrainingLog(Nullable<int> trainingLogId, Nullable<bool> silverlightLoad, Nullable<int> chapters)
        {
            var trainingLogIdParameter = trainingLogId.HasValue ?
                new ObjectParameter("trainingLogId", trainingLogId) :
                new ObjectParameter("trainingLogId", typeof(int));
    
            var silverlightLoadParameter = silverlightLoad.HasValue ?
                new ObjectParameter("silverlightLoad", silverlightLoad) :
                new ObjectParameter("silverlightLoad", typeof(bool));
    
            var chaptersParameter = chapters.HasValue ?
                new ObjectParameter("chapters", chapters) :
                new ObjectParameter("chapters", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTrainingLog", trainingLogIdParameter, silverlightLoadParameter, chaptersParameter);
        }
    
        public virtual int UpdateTransaction(Nullable<int> submissionTransactionID, Nullable<int> submissionTaskID, string description)
        {
            var submissionTransactionIDParameter = submissionTransactionID.HasValue ?
                new ObjectParameter("SubmissionTransactionID", submissionTransactionID) :
                new ObjectParameter("SubmissionTransactionID", typeof(int));
    
            var submissionTaskIDParameter = submissionTaskID.HasValue ?
                new ObjectParameter("SubmissionTaskID", submissionTaskID) :
                new ObjectParameter("SubmissionTaskID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTransaction", submissionTransactionIDParameter, submissionTaskIDParameter, descriptionParameter);
        }
    
        public virtual int UpdateUser(string puid, Nullable<System.DateTime> dateLastAccessed, Nullable<System.DateTime> dateActivated, string customLenses, Nullable<bool> showFullProfile, string firstName, string lastName, string title, string company, string companyUrl, string city, Nullable<int> regionid, string state, string countrycode, string country)
        {
            var puidParameter = puid != null ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(string));
    
            var dateLastAccessedParameter = dateLastAccessed.HasValue ?
                new ObjectParameter("dateLastAccessed", dateLastAccessed) :
                new ObjectParameter("dateLastAccessed", typeof(System.DateTime));
    
            var dateActivatedParameter = dateActivated.HasValue ?
                new ObjectParameter("dateActivated", dateActivated) :
                new ObjectParameter("dateActivated", typeof(System.DateTime));
    
            var customLensesParameter = customLenses != null ?
                new ObjectParameter("customLenses", customLenses) :
                new ObjectParameter("customLenses", typeof(string));
    
            var showFullProfileParameter = showFullProfile.HasValue ?
                new ObjectParameter("showFullProfile", showFullProfile) :
                new ObjectParameter("showFullProfile", typeof(bool));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var companyParameter = company != null ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(string));
    
            var companyUrlParameter = companyUrl != null ?
                new ObjectParameter("companyUrl", companyUrl) :
                new ObjectParameter("companyUrl", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var regionidParameter = regionid.HasValue ?
                new ObjectParameter("regionid", regionid) :
                new ObjectParameter("regionid", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var countrycodeParameter = countrycode != null ?
                new ObjectParameter("countrycode", countrycode) :
                new ObjectParameter("countrycode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUser", puidParameter, dateLastAccessedParameter, dateActivatedParameter, customLensesParameter, showFullProfileParameter, firstNameParameter, lastNameParameter, titleParameter, companyParameter, companyUrlParameter, cityParameter, regionidParameter, stateParameter, countrycodeParameter, countryParameter);
        }
    
        public virtual int UserExists(Nullable<System.Guid> puid)
        {
            var puidParameter = puid.HasValue ?
                new ObjectParameter("puid", puid) :
                new ObjectParameter("puid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserExists", puidParameter);
        }
    }
}
